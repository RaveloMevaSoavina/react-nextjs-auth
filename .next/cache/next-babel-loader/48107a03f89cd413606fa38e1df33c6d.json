{"ast":null,"code":"import { query as q } from 'faunadb';\nimport { serverClient, serializeFaunaCookie } from '../../utils/fauna-auth';\nexport default (async (req, res) => {\n  const {\n    username,\n    password\n  } = await req.body;\n\n  try {\n    if (!username || !password) {\n      throw new Error('Username and password must be provided.');\n    }\n\n    const response = await fetch('http://localhost:8080/api/signin', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        username,\n        password\n      })\n    });\n    const loginRes = await response.json();\n    console.log({\n      json\n    }); // const loginRes = await serverClient.query(\n    //   q.Login(q.Match(q.Index('users_by_email'), username), {\n    //     password,\n    //   })\n    // )\n\n    console.log({\n      loginRes\n    });\n\n    if (!loginRes.id) {\n      throw new Error('No id present in login query response.');\n    }\n\n    const cookieSerialized = serializeFaunaCookie(loginRes.id);\n    res.setHeader('Set-Cookie', cookieSerialized);\n    res.status(200).end();\n  } catch (error) {\n    res.status(400).send(error.message);\n  }\n});","map":{"version":3,"sources":["/Users/Nick/Documents/ServeVue/react-auth/with-cookie-auth-fauna/pages/api/login.js"],"names":["query","q","serverClient","serializeFaunaCookie","req","res","username","password","body","Error","response","fetch","method","headers","JSON","stringify","loginRes","json","console","log","id","cookieSerialized","setHeader","status","end","error","send","message"],"mappings":"AAAA,SAASA,KAAK,IAAIC,CAAlB,QAA2B,SAA3B;AACA,SAASC,YAAT,EAAuBC,oBAAvB,QAAmD,wBAAnD;AAEA,gBAAe,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACjC,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAAyB,MAAMH,GAAG,CAACI,IAAzC;;AAEA,MAAI;AACF,QAAI,CAACF,QAAD,IAAa,CAACC,QAAlB,EAA4B;AAC1B,YAAM,IAAIE,KAAJ,CAAU,yCAAV,CAAN;AACD;;AAED,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,kCAAD,EAAqC;AAC/DC,MAAAA,MAAM,EAAE,MADuD;AAE/DC,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB,OAFsD;AAG/DL,MAAAA,IAAI,EAAEM,IAAI,CAACC,SAAL,CAAe;AAAET,QAAAA,QAAF;AAAYC,QAAAA;AAAZ,OAAf;AAHyD,KAArC,CAA5B;AAMA,UAAMS,QAAQ,GAAG,MAAMN,QAAQ,CAACO,IAAT,EAAvB;AAEAC,IAAAA,OAAO,CAACC,GAAR,CAAY;AAAEF,MAAAA;AAAF,KAAZ,EAbE,CAeF;AACA;AACA;AACA;AACA;;AAEAC,IAAAA,OAAO,CAACC,GAAR,CAAY;AAAEH,MAAAA;AAAF,KAAZ;;AAEA,QAAI,CAACA,QAAQ,CAACI,EAAd,EAAkB;AAChB,YAAM,IAAIX,KAAJ,CAAU,wCAAV,CAAN;AACD;;AAED,UAAMY,gBAAgB,GAAGlB,oBAAoB,CAACa,QAAQ,CAACI,EAAV,CAA7C;AAEAf,IAAAA,GAAG,CAACiB,SAAJ,CAAc,YAAd,EAA4BD,gBAA5B;AACAhB,IAAAA,GAAG,CAACkB,MAAJ,CAAW,GAAX,EAAgBC,GAAhB;AACD,GA/BD,CA+BE,OAAOC,KAAP,EAAc;AACdpB,IAAAA,GAAG,CAACkB,MAAJ,CAAW,GAAX,EAAgBG,IAAhB,CAAqBD,KAAK,CAACE,OAA3B;AACD;AACF,CArCD","sourcesContent":["import { query as q } from 'faunadb'\nimport { serverClient, serializeFaunaCookie } from '../../utils/fauna-auth'\n\nexport default async (req, res) => {\n  const { username, password } = await req.body\n\n  try {\n    if (!username || !password) {\n      throw new Error('Username and password must be provided.')\n    }\n\n    const response = await fetch('http://localhost:8080/api/signin', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ username, password }),\n    })\n\n    const loginRes = await response.json();\n\n    console.log({ json })\n\n    // const loginRes = await serverClient.query(\n    //   q.Login(q.Match(q.Index('users_by_email'), username), {\n    //     password,\n    //   })\n    // )\n\n    console.log({ loginRes })\n\n    if (!loginRes.id) {\n      throw new Error('No id present in login query response.')\n    }\n\n    const cookieSerialized = serializeFaunaCookie(loginRes.id)\n\n    res.setHeader('Set-Cookie', cookieSerialized)\n    res.status(200).end()\n  } catch (error) {\n    res.status(400).send(error.message)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}