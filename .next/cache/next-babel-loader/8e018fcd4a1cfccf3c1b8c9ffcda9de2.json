{"ast":null,"code":"import { query as q } from 'faunadb';\nimport { serverClient, serializeFaunaCookie } from '../../utils/fauna-auth';\nconst SERVER = \"http://localhost\";\nconst SERVER_PORT = \"8080\";\nexport default (async (req, res) => {\n  const {\n    email,\n    password\n  } = await req.body;\n\n  try {\n    if (!email || !password) {\n      throw new Error('Email and password must be provided.');\n    }\n\n    const settings = {\n      method: 'POST',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    };\n    const fetchResponse = await fetch(`${SERVER}:${SERVER_PORT}/api/signin`, settings);\n    const data = await fetchResponse.json(); // const loginRes = await serverClient.query(\n    //   q.Login(q.Match(q.Index('users_by_email'), email), {\n    //     password,\n    //   })\n    // )\n    // if (!loginRes.secret) {\n    //   throw new Error('No secret present in login query response.')\n    // }\n    // const cookieSerialized = serializeFaunaCookie(loginRes.secret)\n    // res.setHeader('Set-Cookie', cookieSerialized)\n    // res.status(200).end()\n  } catch (error) {\n    res.status(400).send(error.message);\n  }\n});","map":{"version":3,"sources":["/Users/Nick/Documents/ServeVue/react-auth/with-cookie-auth-fauna/pages/api/login.js"],"names":["query","q","serverClient","serializeFaunaCookie","SERVER","SERVER_PORT","req","res","email","password","body","Error","settings","method","headers","Accept","JSON","stringify","data","fetchResponse","fetch","json","error","status","send","message"],"mappings":"AAAA,SAASA,KAAK,IAAIC,CAAlB,QAA2B,SAA3B;AACA,SAASC,YAAT,EAAuBC,oBAAvB,QAAmD,wBAAnD;AAEA,MAAMC,MAAM,GAAG,kBAAf;AACA,MAAMC,WAAW,GAAG,MAApB;AAEA,gBAAe,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACjC,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAsB,MAAMH,GAAG,CAACI,IAAtC;;AAEA,MAAI;AACF,QAAI,CAACF,KAAD,IAAU,CAACC,QAAf,EAAyB;AACvB,YAAM,IAAIE,KAAJ,CAAU,sCAAV,CAAN;AACD;;AAED,UAAMC,QAAQ,GAAG;AACfC,MAAAA,MAAM,EAAE,MADO;AAEfC,MAAAA,OAAO,EAAE;AACPC,QAAAA,MAAM,EAAE,kBADD;AAEP,wBAAgB;AAFT,OAFM;AAMfL,MAAAA,IAAI,EAAEM,IAAI,CAACC,SAAL,CAAeC,IAAf;AANS,KAAjB;AASA,UAAMC,aAAa,GAAG,MAAMC,KAAK,CAAE,GAAEhB,MAAO,IAAGC,WAAY,aAA1B,EAAwCO,QAAxC,CAAjC;AACA,UAAMM,IAAI,GAAG,MAAMC,aAAa,CAACE,IAAd,EAAnB,CAfE,CAiBF;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACD,GA/BD,CA+BE,OAAOC,KAAP,EAAc;AACdf,IAAAA,GAAG,CAACgB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBF,KAAK,CAACG,OAA3B;AACD;AACF,CArCD","sourcesContent":["import { query as q } from 'faunadb'\nimport { serverClient, serializeFaunaCookie } from '../../utils/fauna-auth'\n\nconst SERVER = \"http://localhost\";\nconst SERVER_PORT = \"8080\";\n\nexport default async (req, res) => {\n  const { email, password } = await req.body\n\n  try {\n    if (!email || !password) {\n      throw new Error('Email and password must be provided.')\n    }\n\n    const settings = {\n      method: 'POST',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(data)\n    };\n\n    const fetchResponse = await fetch(`${SERVER}:${SERVER_PORT}/api/signin`, settings);\n    const data = await fetchResponse.json();\n\n    // const loginRes = await serverClient.query(\n    //   q.Login(q.Match(q.Index('users_by_email'), email), {\n    //     password,\n    //   })\n    // )\n\n    // if (!loginRes.secret) {\n    //   throw new Error('No secret present in login query response.')\n    // }\n\n    // const cookieSerialized = serializeFaunaCookie(loginRes.secret)\n\n    // res.setHeader('Set-Cookie', cookieSerialized)\n    // res.status(200).end()\n  } catch (error) {\n    res.status(400).send(error.message)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}